#!/usr/bin/env zsh


# Yabai script addition
sudo yabai --load-sa
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"

# Specific border style for active window q
borders active_color="gradient(top_left=0xFFFF6F00,bottom_right=0xFF9C27B0)" inactive_color=0x00ffffff width=5.0  &

# Set the default layout to float
#yabai -m config layout default float
yabai -m config layout stack

# # Get displays and existing spaces
# displays=($(yabai -m query --displays | jq '.[].index'))
# spaces=($(yabai -m query --spaces | jq '.[].index'))

# # Leave only one space per display
# for display in "${displays[@]}"; do
#     display_spaces=($(yabai -m query --spaces --display "${display}" | jq '.[].index'))
#     if [ "${#display_spaces[@]}" -gt 1 ]; then
#         for space in "${display_spaces[@]:1}"; do
#             yabai -m space "${space}" --destroy
#         done
#     fi
# done

# # Space 1 is stack, 2 is bsp and 3 is float
yabai -m space 1 --layout stack
yabai -m space 2 --layout bsp
yabai -m space 3 --layout bsp


# function yabai_rule {
#   yabai -m rule --add "$@"
#   yabai -m rule --apply "$@"
# }

# # yabai_rule app="^Firefox Nightly$" manage=on
# # yabai -m rule --apply app=".*" space=^"other"


# # yabai_rule app="^Firefox Nightly$" space="main"
# # yabai_rule app="^Firefox$" space="main"

# # yabai_rule  app="^Code$" space="dev"
# # yabai_rule  app="^Fork$" space="dev"a


# # yabai_rule  app="^kitty$" space="terminal"
# # yabai_rule  app="^iTerm2$" space="terminal"
# yabai_rule app=".*" sub-layer=normal
# yabai_rule app="^SteerMouse$" manage="off"
# yabai_rule app="^iTerm2$" manage="off"
# yabai_rule app="^Raycast$" manage="off"
# yabai_rule app="^Calculator$" manage="off"
# yabai_rule app="^Software Update$" manage="off"
# yabai_rule app="^Dictionary$" manage="off"
# yabai_rule app="^System Preferences$" manage="off"
# yabai_rule app="^System Settings$" manage="off"
# yabai_rule app=".*Settings$" manage="off"
# yabai_rule app="^Photo Booth$" manage="off"
# yabai_rule app="^Archive Utility$" manage="off"
# yabai_rule app="^Activity Monitor$" manage="off"

# #yabai_rule app="^Microsoft Outlook$" space="^mail"
# #yabai_rule app="^Code$" space="^dev"
# #yabai_rule app="^kitty$" space="^dashboard"

# # yabai app
# # yabai -m rule --add app="^Firefox Nightly$" space=^"web" \
# #   --add app="^Firefox" space=^"web" \
# #   --add app="^Microsoft Outlook$" space=^"other" \
# #     --add app="^Teams$" space=^"other" \
# #      --add app="^Code$" space=^"dev" \ 
# #   --add app="^Fork$" space=^"dev" \
# #   --add app="^kitty$" space=^"terminal" \
# #   --add app="^App Store$" space=^"settings" \
# #   --add app="^(SteerMouse|iTerm2|Calculator|Software Update|Dictionary|System Preferences|System Settings|Photo Booth|Archive Utility|Activity Monitor)$" manage=off \  --add app="iTerm2" title=".*Hotkey Window.*" manage=off  &&  echo "iTerm2 Hotkey Window is now unmanaged" || echo "iTerm2 Hotkey Window is already unmanaged"
   
# # Paddings
yabai -m config top_padding    15
yabai -m config bottom_padding 15
yabai -m config left_padding   15
yabai -m config right_padding  15
yabai -m config window_gap     15
#s yabai -m config external_bar all:0:0
yabai -m config window_placement second_child
yabai -m config mouse_modifier cmd
yabai -m config mouse_action1 move
yabai -m config mouse_action2 resize
yabai -m config mouse_drop_action swap

# # Window conf
# yabai -m config auto_balance on
# yabai -m config split_ratio 0.5
yabai -m config window_opacity on
 yabai -m config active_window_opacity 1.0
 yabai -m config normal_window_opacity 0.9
# yabai -m config window_opacity_duration 0.0
# yabai -m config window_animation_duration 0.3
# yabai -m config window_animation_easing ease_out_quint
# yabai -m config window_origin_display focused
# yabai -m config window_shadow off
# yabai -m config insert_feedback_color 0xFFFF6F00

# # Focus
# yabai -m signal --add event=mission_control_exit action='echo "refresh" | nc -U /tmp/yabai-indicator.socket'
# yabai -m signal --add event=display_added action='echo "refresh" | nc -U /tmp/yabai-indicator.socket'
# yabai -m signal --add event=display_removed action='echo "refresh" | nc -U /tmp/yabai-indicator.socket'
# yabai -m signal --add event=window_created action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
# yabai -m signal --add event=window_destroyed action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
# yabai -m signal --add event=window_focused action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
# yabai -m signal --add event=window_moved action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
# yabai -m signal --add event=window_resized action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
# yabai -m signal --add event=window_minimized action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
# yabai -m signal --add event=window_deminimized action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'

# # Menubar
# #yabai -m config menubar_opacity 0.0
# #osascript -e 'tell application id "tracesOf.Uebersicht" to refresh'

# yabai -m display --focus 1

# # Log
# yabai -m config debug_output off
